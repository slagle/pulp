[[PageOutline]]
{{{
#!comment
!!!DO NOT EDIT DIRECTLY!!!
This wiki page was generated by the restapi.py script
If you do edit this page directly, please remove this comment
}}}
= Tasking RESTful Interface = #top
''RESTful interface providing an administrative and debugging api for'' [[BR]]
''             pulp's tasking system.'' [[BR]]
[[BR]]
'''Task object fields''': 
 * '''id''' <str> ''unique id (usually a uuid) for the task''
 * '''job_id''' <str> ''associate job id''
 * '''class_name''' <str> ''name of the class, if the task's method is an instance method''
 * '''method_name''' <str> ''name of the pulp library method that was called''
 * '''state''' <str> ''one of several valid states of the tasks lifetime: waiting, running, finished, error, timed_out, canceled, reset, suspended''
 * '''start_time''' <str or nil> ''time the task started running in iso8601 format, nil if the task has not yet started''
 * '''finish_time''' <or nil> ''time the task finished running in iso8601 format, nil if the task has not yet finished''
 * '''result''' <object or nil> ''the result of the pulp library method upon return, usually nil''
 * '''exception''' <str or nil> ''a string representation of an error in the pulp librry call, if any''
 * '''traceback''' <str or nil> ''a string print out of the trace back for the exception, if any''
 * '''progress''' <object or nil> ''object representing the pulp library call's progress, nill if no information is available''
 * '''scheduled_time''' <str or nil> ''time the task is scheduled to run in iso8601 format, applicable only for scheduled tasks''
 * '''snapshot_id''' <str> ''id of task's snapshot, if it has one''
'''TaskSnapshot object fields''': 
 * '''id''' <str> ''unique task id''
 * '''class_name''' <str> ''name of the class, if the task's method is an instance method''
 * '''method_name''' <str> ''name of the pulp library method that was called''
 * '''state''' <str> ''one of several valid states of the tasks lifetime: waiting, running, finished, error, timed_out, canceled, reset, suspended''
 * '''failure_threshold''' <int> ''number of failures allowed this task before it is no longer scheduled''
 * '''cancel_attempts''' <int> ''the number of times cancel was called on this task''
 * '''callable''' <str> ''pickled task method''
 * '''args''' <str> ''pickled arguments for the task method''
 * '''kwargs''' <str> ''picked keyword arguments for the task method''
 * '''progress''' <object or nil> ''object representing the pulp library call's progress, nill if no information is available''
 * '''timeout''' <str> ''pickled timedelta representing the time limit for the task's run''
 * '''schedule_threshold''' <str> ''pickled timedelta representing a max difference between the scheduled_time and start_time before an error is logged''
 * '''_progress_callback''' <str> ''pickled method allowing progress information to be recorded by the task''
 * '''start_time''' <str> ''pickled datetime showing the start time of the task''
 * '''finish_time''' <str> ''pickled datetime showing the finish time of the task''
 * '''result''' <str> ''pickled result of the task call''
 * '''exception''' <str> ''pickled error, if one occurred''
 * '''traceback''' <str> ''pickled traceback, if one occured''

----

== Cancel A Task ==
''Cancel a waiting or running task.'' [[BR]]
[[BR]]
'''method''': POST [[BR]]
[[BR]]
'''path''': /tasks/<id>/cancel/ [[BR]]
[[BR]]
'''permission''': UPDATE [[BR]]
[[BR]]
'''success response''': 202 Accepted [[BR]]
[[BR]]
'''failure response''': 404 Not Found [[BR]]
[[BR]]
'''return''': Task object [[BR]]
[[BR]]

----

== Delete A Task Snapshot ==
''Delete the snapshot for a given task'' [[BR]]
[[BR]]
'''method''': DELETE [[BR]]
[[BR]]
'''path''': /tasks/<id>/snapshot/ [[BR]]
[[BR]]
'''permission''': Super User Only [[BR]]
[[BR]]
'''success response''': 200 OK [[BR]]
[[BR]]
'''failure response''': 404 Not Found if no snapshot exists for the given task [[BR]]
[[BR]]
'''return''': !TaskSnapshot object [[BR]]
[[BR]]

== Get A Task Snapshot ==
''Get a !TaskSnapshot object for the give task'' [[BR]]
[[BR]]
'''method''': GET [[BR]]
[[BR]]
'''path''': /tasks/<id>/snapshot/ [[BR]]
[[BR]]
'''permission''': Super User Only [[BR]]
[[BR]]
'''success response''': 200 OK [[BR]]
[[BR]]
'''failure response''': 404 Not Found if no snapshot exists for the given task [[BR]]
[[BR]]
'''return''': !TaskSnapshot object [[BR]]
[[BR]]

----

== Get All Task Snapshots ==
''Get a list of all task snapshots currently in the system'' [[BR]]
[[BR]]
'''method''': GET [[BR]]
[[BR]]
'''path''': /tasks/snapshots/ [[BR]]
[[BR]]
'''permission''': Super User Only [[BR]]
[[BR]]
'''success response''': 200 OK [[BR]]
[[BR]]
'''failure response''': None [[BR]]
[[BR]]
'''return''': a list of !TaskSnapshot objects [[BR]]
[[BR]]

----

== Remove A Task ==
''Remove a task from the tasking sub-system. This does not interrupt the task if it is running'' [[BR]]
[[BR]]
'''method''': DELETE [[BR]]
[[BR]]
'''path''': /tasks/<id>/ [[BR]]
[[BR]]
'''permission''': Super User Only [[BR]]
[[BR]]
'''success response''': 202 Accepted [[BR]]
[[BR]]
'''failure response''': 404 Not Found if no such task [[BR]]
[[BR]]
'''return''': Task object [[BR]]
[[BR]]

== Get A Task ==
''Get a Task object for a specific task'' [[BR]]
[[BR]]
'''method''': GET [[BR]]
[[BR]]
'''path''': /tasks/<id>/ [[BR]]
[[BR]]
'''permission''': READ [[BR]]
[[BR]]
'''success response''': 200 OK [[BR]]
[[BR]]
'''failure response''': 404 Not Found if no such task [[BR]]
[[BR]]
'''return''': Task object [[BR]]
[[BR]]

----

== Get All Tasks ==
''Get a list of all tasks currently in the tasking system'' [[BR]]
[[BR]]
'''method''': GET [[BR]]
[[BR]]
'''path''': /tasks/ [[BR]]
[[BR]]
'''permission''': READ [[BR]]
[[BR]]
'''success response''': 200 OK [[BR]]
[[BR]]
'''failure response''': None [[BR]]
[[BR]]
'''return''': list of task objects [[BR]]
[[BR]]
'''filters''': 
 * '''id''' <str> ''task id''
 * '''state''' <str> ''tasking system task state: waiting, running, complete, incomplete, current, archived (current is the same as waiting, running, complete, and incomplete, also the same as omitting the state filter; archived looks into the the task history, will not return archived tasks without this filter)''
[[BR]]
