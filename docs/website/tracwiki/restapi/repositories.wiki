[[PageOutline]]
{{{
#!comment
!!!DO NOT EDIT DIRECTLY!!!
This wiki page was generated by the restapi.py script
If you do edit this page directly, please remove this comment
}}}
= Repositories RESTful Interface = #top
'' RESTful interface for the creation, querying, and management of repositories managed by Pulp.'' [[BR]]
'' Repositories are represented as Repo objects.'' [[BR]]
'' Some operations on repositories happen asynchronously, as such, these operations return Task objects.'' [[BR]]
[[BR]]
'''Repo object fields''': 
 * '''id''' <str> ''repository identifier''
 * '''source''' <!RepoSource object> ''upstream content source''
 * '''name''' <str> ''human-friendly name''
 * '''arch''' <str> ''hardware architecture that repository is for''
 * '''release''' <str> ''release number''
 * '''packages''' <list of str> ''list of package ids in the repository [deferred field]''
 * '''package_count''' <int> ''number of packages in the repository''
 * '''packagegroups''' <object> ''map of package group names to list of package ids in the group [deferred field]''
 * '''packagegroupcategories''' <object> ''map of categories to lists of package group names [deferred field]''
 * '''repomd_xml_path''' <str> ''path to the repository's repomd xml file''
 * '''group_xml_path''' <str> ''path to the repository's group xml file''
 * '''group_gz_xml_path''' <str> ''path to the repository's compressed group xml file''
 * sync_schedule, iso8601 formated recurring interval
 * '''last_sync''' <str or nil> ''date and time of last successful sync in iso8601 format, nil if has not been synched''
 * '''feed_ca''' <str> ''full path on the Pulp server to the certificate authority used to verify SSL connections to the repo's feed''
 * '''feed_cert''' <str> ''full path on the Pulp server to the certificate used to authenticate Pulp with the repo's feed server when synchronizing content''
 * '''feed_key''' <str> ''full path on the Pulp server to the private key for the feed certificate''
 * '''consumer_ca''' <str> ''full path on the Pulp server to the certificate authority used to verify consumer entitlement certificates''
 * '''consumer_cert''' <str> ''full path on the Pulp server to the entitlement certificate that will be given to bound consumers to authenticate access to the repository''
 * '''consumer_key''' <str> ''full path on the Pulp server to the private key for the consumer's entitlement certificate''
 * '''errata''' <object> ''map of errata names to lists of package ids in each errata [deferred field]''
 * '''groupid''' <list of str> ''list of repository group ids this repository belongs to''
 * '''relative_path''' <str> ''repository's path relative to the configured root''
 * '''files''' <list of str> ''list of ids of the non-package files in the repository [deferred field]''
 * '''publish''' <bool> ''whether or not the repository is available''
 * '''clone_ids''' <list of str> ''list of repository ids that are clones of this repository''
 * '''distributionid''' <list of str> ''list of distribution ids this repository belongs to [deferred fields]''
 * '''checksum_type''' <str> ''name of the algorithm used for checksums of the repository's content for feedless repos; For feed repos, this gets overwritten by source checksum type from repomd.xml.''
 * '''filters''' <list of str> ''list of filter ids associated with the repository''
 * '''content_types''' <str> ''content type allowed in this repository; default:yum; supported: [yum, file]''
 * '''notes''' <dict> ''custom key-value attributes for this repository''
'''!RepoSource object fields''': 
 * '''supported_types''' <list of str> ''list of supported types of repositories''
 * '''type''' <str> ''repository source type''
 * '''url''' <str> ''repository source url''
'''Task object fields''': 
 * '''id''' <str> ''unique id (usually a uuid) for the task''
 * '''method_name''' <str> ''name of the pulp library method that was called''
 * '''state''' <str> ''one of several valid states of the tasks lifetime: waiting, running, finished, error, timed_out, canceled, reset, suspended''
 * '''start_time''' <str or nil> ''time the task started running in iso8601 format, nil if the task has not yet started''
 * '''finish_time''' <or nil> ''time the task finished running in iso8601 format, nil if the task has not yet finished''
 * '''result''' <object or nil> ''the result of the pulp library method upon return, usually nil''
 * '''exception''' <str or nil> ''a string representation of an error in the pulp librry call, if any''
 * '''traceback''' <str or nil> ''a string print out of the trace back for the exception, if any''
 * '''progress''' <object or nil> ''object representing the pulp library call's progress, nill if no information is available''
 * '''scheduled_time''' <str or nil> ''time the task is scheduled to run in iso8601 format, applicable only for scheduled tasks''
'''Progress object fields''': 
 * '''step''' <str> ''name of the step the pulp library call is on''
 * '''items_total''' <int> ''the total number of items to be processed by the call''
 * '''items_left''' <int> ''the remaining number of items to be processed by the call''
 * '''details''' <object> ''object providing further details on the progress''
'''Details object fields''': 
 * '''num_success''' <int> ''the number of items successfully processed''
 * '''total_count''' <int> ''the number of items that were attempted to be processed''
'''!TaskHistory object fields''': 
 * '''id''' <str> ''uuid of task''
 * '''class_name''' <str> ''name of the task was a instance method''
 * '''method_name''' <str> ''namd of the task callable''
 * '''args''' <list> ''list of arguments passed to the task callable''
 * '''kwargs''' <dict> ''dictionary of arguments passed to the task callable''
 * '''state''' <str> ''final state of the task''
 * '''progress''' <object> ''Progress object for the progress at the end of the task''
 * '''result''' <object> ''result returned by the task, most likely null''
 * '''exception''' <str> ''error, if one occurred''
 * '''traceback''' <str> ''traceback if error occurred''
 * '''consecutive_failures''' <int> ''number of failures since last success''
 * '''scheduled_time''' <str> ''iso8601 combined date time when task was scheduler to run''
 * '''start_time''' <str> ''iso8601 combined date time when task actually ran''
 * '''finished_time''' <str> ''iso8601 combined date time when task completed''

----

== Delete All Repositories ==
''Delete all repositories managed by Pulp.'' [[BR]]
[[BR]]
'''method''': DELETE [[BR]]
[[BR]]
'''path''': /repositories/ [[BR]]
[[BR]]
'''permission''': DELETE [[BR]]
[[BR]]
'''success response''': 200 OK [[BR]]
[[BR]]
'''failure response''': None [[BR]]
[[BR]]
'''return''': True [[BR]]
[[BR]]

== List Available Repositories ==
''Get a list of all repositories managed by Pulp.'' [[BR]]
[[BR]]
'''method''': GET [[BR]]
[[BR]]
'''path''': /repositories/ [[BR]]
[[BR]]
'''permission''': READ [[BR]]
[[BR]]
'''success response''': 200 OK [[BR]]
[[BR]]
'''failure response''': None [[BR]]
[[BR]]
'''return''': list of Repo objects, possibly empty [[BR]]
[[BR]]
'''example''': 
{{{
#!js
[
 {'arch': 'noarch',
  'checksum_type': 'sha256',
  'clone_ids': ['0ad-clone', '0ad-clone-again'],
  'comps': '/pulp/api/repositories/0ad/comps/',
  'consumer_ca': None,
  'consumer_cert': None,
  'content_types': 'yum',
  'distribution': '/pulp/api/repositories/0ad/distribution/',
  'distributionid': [],
  'errata': '/pulp/api/repositories/0ad/errata/',
  'feed_ca': None,
  'feed_cert': None,
  'files': '/pulp/api/repositories/0ad/files/',
  'files_count': 0,
  'filters': [],
  'groupid': [],
  'id': '0ad',
  'keys': '/pulp/api/repositories/0ad/keys/',
  'last_sync': '2012-01-04T13:55:11-07:00',
  'name': '0ad',
  'notes': {},
  'package_count': 2,
  'packagegroupcategories': '/pulp/api/repositories/0ad/packagegroupcategories/',
  'packagegroups': '/pulp/api/repositories/0ad/packagegroups/',
  'packages': '/pulp/api/repositories/0ad/packages/',
  'preserve_metadata': False,
  'publish': True,
  'relative_path': 'repos/bioinfornatics/0ad/fedora-16/x86_64',
  'source': {'type': 'remote',
  'url': 'http://repos.fedorapeople.org/repos/bioinfornatics/0ad/fedora-16/x86_64/'},
  'sync_options': {'skip': {}},
  'sync_schedule': '2011-12-13T13:45:00-07:00/PT5M',
  'uri': 'https://localhost/pulp/repos/repos/bioinfornatics/0ad/fedora-16/x86_64/',
  'uri_ref': '/pulp/api/repositories/0ad/'},
...
]
}}}
[[BR]]
'''filters''': 
 * '''id''' <str> ''repository id''
 * '''name''' <str> ''repository name''
 * '''arch''' <str> ''repository contect architecture''
 * '''groupid''' <str> ''repository group id''
 * '''relative_path''' <str> ''repository's on disk path''
 * '''note''' <str> ''repository note in the format key:value''
[[BR]]

== Create a Repository ==
''Create a new repository based on the passed information'' [[BR]]
[[BR]]
'''method''': POST [[BR]]
[[BR]]
'''path''': /repositories/ [[BR]]
[[BR]]
'''permission''': CREATE [[BR]]
[[BR]]
'''success response''': 201 Created [[BR]]
[[BR]]
'''failure response''': 409 Conflict if the parameters matches an existing repository [[BR]]
[[BR]]
'''return''': new Repo object [[BR]]
[[BR]]
'''example''': 
{{{
#!js
{'arch': 'noarch',
 'checksum_type': 'sha256',
 'clone_ids': [],
 'consumer_ca': None,
 'consumer_cert': None,
 'content_types': 'yum',
 'distributionid': [],
 'errata': {},
 'feed_ca': None,
 'feed_cert': None,
 'files': [],
 'filters': [],
 'group_gz_xml_path': '',
 'group_xml_path': '',
 'groupid': [],
 'id': 'my-repo',
 'last_sync': None,
 'name': 'my-repo',
 'notes': {},
 'package_count': 0,
 'packagegroupcategories': {},
 'packagegroups': {},
 'packages': [],
 'preserve_metadata': False,
 'publish': True,
 'relative_path': 'yum/repo',
 'release': None,
 'repomd_xml_path': '/var/lib/pulp//repos/yum/repo/repodata/repomd.xml',
 'source': {'type': 'remote', 'url': 'http://example.org/yum/repo/'},
 'sync_in_progress': False,
 'sync_options': {},
 'sync_schedule': None,
 'uri_ref': '/pulp/api/repositories/my-repo/'}
}}}
[[BR]]
'''parameters''': 
 * '''id''' <str> ''the repository's unique id''
 * '''name''' <str> ''a human-friendly name for the repsitory''
 * '''arch''' <str> ''the main architecture of packages contained in the repository''
 * '''feed''' <str> ''repository feed in the form of <type>:<url>''
 * '''feed_cert_data''' ''(optional)'' <dict> ''certificate information to use when connecting to the feed.  Has fields 'ca':filename, 'crt':filename, 'key':filename''
 * '''consumer_cert_data''' ''(optional)'' <str> ''certificate information to use when validating consumers of this repo.  Has fields 'ca':filename, 'crt':filename, 'key':filename''
 * '''relative_path''' ''(optional)'' <str> ''repository on disk path''
 * '''groupid''' ''(optional)'' <list of str> ''list of repository group ids this repository belongs to''
 * '''gpgkeys''' ''(optional)'' <list of str> ''list of gpg keys used for signing content''
 * '''checksum_type''' ''(optional)'' <str> ''name of the algorithm to use for content checksums for feedless repos, defaults to sha256. For feed repos, this gets overwritten by source checksum type from repomd.xml.''
 * '''preserve_metadata''' ''(optional)'' <bool> ''will not regenerate metadata and treats the repo as a mirror''
 * '''content_types''' ''(optional)'' <str> ''content type allowed in this repository; default:yum; supported: [yum, file]''
 * '''publish''' ''(optional)'' <bool> ''sets the publish state on a repository; if not specified uses 'default_to_published' value from pulp.conf''
[[BR]]

----

== Delete A Repository ==
''Delete a single repository'' [[BR]]
[[BR]]
'''method''': DELETE [[BR]]
[[BR]]
'''path''': /repositories/<id>/ [[BR]]
[[BR]]
'''permission''': DELETE [[BR]]
[[BR]]
'''success response''': 202 Accepted [[BR]]
[[BR]]
'''failure response''': 
 404 Not Found if repository does not exist [[BR]]
                           409 Conflict if repository cannot be deleted [[BR]]
[[BR]]
'''return''': a Task object [[BR]]
[[BR]]
'''example''': 
{{{
#!js
{'args': [],
 'class_name': 'RepoApi',
 'exception': None,
 'finish_time': None,
 'id': '1a58cd4f-372f-11e1-bdbc-52540005f34c',
 'job_id': None,
 'method_name': 'delete',
 'progress': None,
 'result': None,
 'scheduled_time': '2012-01-04T23:52:04Z',
 'scheduler': 'immediate',
 'start_time': None,
 'state': 'waiting',
 'traceback': None}
}}}
[[BR]]

== Get A Repository ==
''Get a Repo object for a specific repository'' [[BR]]
[[BR]]
'''method''': GET [[BR]]
[[BR]]
'''path''': /repositories/<id>/ [[BR]]
[[BR]]
'''permission''': READ [[BR]]
[[BR]]
'''success response''': 200 OK [[BR]]
[[BR]]
'''failure response''': 404 Not Found if the id does not match a repository [[BR]]
[[BR]]
'''return''': a Repo object [[BR]]
[[BR]]
'''example''': 
{{{
#!js
{'arch': 'noarch',
 'checksum_type': 'sha256',
 'clone_ids': ['0ad-clone', '0ad-clone-again'],
 'comps': '/pulp/api/repositories/0ad/comps/',
 'consumer_ca': None,
 'consumer_cert': None,
 'content_types': 'yum',
 'distribution': '/pulp/api/repositories/0ad/distribution/',
 'distributionid': [],
 'errata': '/pulp/api/repositories/0ad/errata/',
 'feed_ca': None,
 'feed_cert': None,
 'files': '/pulp/api/repositories/0ad/files/',
 'files_count': 0,
 'filters': [],
 'groupid': [],
 'id': '0ad',
 'keys': '/pulp/api/repositories/0ad/keys/',
 'last_sync': '2012-01-04T13:55:11-07:00',
 'name': '0ad',
 'notes': {},
 'package_count': 2,
 'packagegroupcategories': '/pulp/api/repositories/0ad/packagegroupcategories/',
 'packagegroups': '/pulp/api/repositories/0ad/packagegroups/',
 'packages': '/pulp/api/repositories/0ad/packages/',
 'preserve_metadata': False,
 'publish': True,
 'relative_path': 'repos/bioinfornatics/0ad/fedora-16/x86_64',
 'source': {'type': 'remote',
 'url': 'http://repos.fedorapeople.org/repos/bioinfornatics/0ad/fedora-16/x86_64/'},
 'sync_options': {'skip': {}},
 'sync_schedule': '2011-12-13T13:45:00-07:00/PT5M',
 'uri': 'https://localhost/pulp/repos/repos/bioinfornatics/0ad/fedora-16/x86_64/',
 'uri_ref': '/pulp/api/repositories/0ad/'}
}}}
[[BR]]

== Update A Repository ==
''Change an exisiting repository.'' [[BR]]
[[BR]]
'''method''': PUT [[BR]]
[[BR]]
'''path''': /repositories/<id>/ [[BR]]
[[BR]]
'''permission''': UPDATE [[BR]]
[[BR]]
'''success response''': 200 OK [[BR]]
[[BR]]
'''failure response''': 400 Bad Request when trying to change the id [[BR]]
[[BR]]
'''return''': a Repo object [[BR]]
[[BR]]
'''example''': 
{{{
#!js
{'arch': 'noarch',
 'checksum_type': 'sha256',
 'clone_ids': [],
 'consumer_ca': None,
 'consumer_cert': None,
 'content_types': 'yum',
 'distributionid': [],
 'errata': {},
 'feed_ca': None,
 'feed_cert': None,
 'files': [],
 'filters': [],
 'group_gz_xml_path': '',
 'group_xml_path': '',
 'groupid': [],
 'id': 'my-repo',
 'last_sync': None,
 'name': 'my-repo',
 'notes': {},
 'package_count': 0,
 'packagegroupcategories': {},
 'packagegroups': {},
 'packages': [],
 'preserve_metadata': False,
 'publish': True,
 'relative_path': 'yum/repo',
 'release': None,
 'repomd_xml_path': '/var/lib/pulp//repos/yum/repo/repodata/repomd.xml',
 'source': {'type': 'remote', 'url': 'http://example.org/yum/repo/'},
 'sync_in_progress': False,
 'sync_options': {},
 'sync_schedule': None,
 'uri_ref': '/pulp/api/repositories/my-repo/'}
}}}
[[BR]]
'''parameters''': 
 * '''name''' <str> ''name of the repository''
 * '''arch''' <str> ''architecture of the repository''
 * '''feed_cert_data''' <object> ''feed key and certificate''
 * '''consumer_cert_data''' <object> ''consumers key and certificate''
 * '''feed''' <str> ''url of feed''
 * '''checksum_type''' <str> ''name of checksum algorithm (sha256, sha1, md5)''
 * '''addgrp''' ''(optional)'' <list of str> ''list of group ids to add the repository to''
 * '''rmgrp''' ''(optional)'' <list of str> ''list of group ids to remove the repository from''
 * '''addkeys''' ''(optional)'' <list of str> ''list of keys to add to the repository''
 * '''rmkeys''' ''(optional)'' <list of str> ''list of keys to remove from the repository''
[[BR]]

----

== List Actions ==
''Get a list of actions that were executed asynchronously on a repository.'' [[BR]]
''        This method only works for actions that returned a 202 Accepted response.'' [[BR]]
''        e.g. /repositories/my-repo/sync/'' [[BR]]
[[BR]]
'''method''': GET [[BR]]
[[BR]]
'''path''': /repositories/<id>/<action name>/ [[BR]]
[[BR]]
'''permission''': READ [[BR]]
[[BR]]
'''success response''': 200 OK [[BR]]
[[BR]]
'''failure response''': None [[BR]]
[[BR]]
'''return''': list of Task objects [[BR]]
[[BR]]

== Repository Sychronization ==
''Synchronize the repository's content from its source.'' [[BR]]
[[BR]]
'''method''': POST [[BR]]
[[BR]]
'''path''': /repositories/<id>/sync/ [[BR]]
[[BR]]
'''permission''': EXECUTE [[BR]]
[[BR]]
'''success response''': 202 Accepted [[BR]]
[[BR]]
'''failure response''': 
 404 Not Found if the id does not match a repository [[BR]]
                           406 Not Acceptable if the repository does not have a source [[BR]]
                           409 Conflict if a sync is already in progress for the repository [[BR]]
[[BR]]
'''return''': a Task object [[BR]]
[[BR]]
'''parameters''': 
 * '''timeout''' ''(optional)'' <str> ''timeout in <units>:<value> format (e.g. hours:2) valid units: seconds, minutes, hours, days, weeks''
 * '''skip''' ''(optional)'' <object> ''yum skip dict''
 * '''limit''' ''(optional)'' <int> ''value in KB/sec to limit download bandwidth per thread.  Only applicable for yum synchronization''
 * '''threads''' ''(optional)'' <int> ''number of threads to use for synchronization.  Only applicable for yum synchronization''
[[BR]]

== Add distributions to Repository ==
''Add distributions to repositories'' [[BR]]
[[BR]]
'''method''': POST [[BR]]
[[BR]]
'''path''': /repositories/<id>/add_distribution/ [[BR]]
[[BR]]
'''permission''': EXECUTE [[BR]]
[[BR]]
'''success response''': 200 OK [[BR]]
[[BR]]
'''failure response''': 404 Not Found if the id does not match a repository [[BR]]
[[BR]]
'''return''': True on successful add, False otherwise [[BR]]
[[BR]]
'''parameters''': 
 * '''distributionid''' <str> ''distribution id''
[[BR]]

== Add Errata ==
''Add errata to the repository. This does not update metadata; call generate_metadata after this call.'' [[BR]]
[[BR]]
'''method''': POST [[BR]]
[[BR]]
'''path''': /repositories/<id>/add_errata/ [[BR]]
[[BR]]
'''permission''': EXECUTE [[BR]]
[[BR]]
'''success response''': 200 OK [[BR]]
[[BR]]
'''failure response''': 404 Not Found if the id does not match a repository [[BR]]
[[BR]]
'''return''': nil [[BR]]
[[BR]]
'''parameters''': 
 * '''errataid''' <str> ''errata id''
[[BR]]

== Add File ==
''Add files to the repository.'' [[BR]]
[[BR]]
'''method''': POST [[BR]]
[[BR]]
'''path''': /repositories/<id>/add_file/ [[BR]]
[[BR]]
'''permission''': EXECUTE [[BR]]
[[BR]]
'''success response''': 200 OK [[BR]]
[[BR]]
'''failure response''': 404 Not Found if the id does not match a repository [[BR]]
[[BR]]
'''return''': true [[BR]]
[[BR]]
'''parameters''': 
 * '''fileids''' <list of str> ''list of file ids''
[[BR]]

== Add Filters ==
''Add filters to the repository.'' [[BR]]
[[BR]]
'''method''': POST [[BR]]
[[BR]]
'''path''': /repositories/<id>/add_filters/ [[BR]]
[[BR]]
'''permission''': EXECUTE [[BR]]
[[BR]]
'''success response''': 200 OK [[BR]]
[[BR]]
'''failure response''': 404 Not Found if the id does not match a repository [[BR]]
[[BR]]
'''return''': true [[BR]]
[[BR]]
'''parameters''': 
 * '''filters''' <list of str> ''list of filter ids''
[[BR]]

== Add Group ==
''Add a group to the repository.'' [[BR]]
[[BR]]
'''method''': POST [[BR]]
[[BR]]
'''path''': /repositories/<id>/add_group/ [[BR]]
[[BR]]
'''permission''': EXECUTE [[BR]]
[[BR]]
'''success response''': 200 OK [[BR]]
[[BR]]
'''failure response''': 404 Not Found if the id does not match a repository [[BR]]
[[BR]]
'''return''': true [[BR]]
[[BR]]
'''parameters''': 
 * '''addgrp''' <str> ''group id''
[[BR]]

== add a custom metadata filetype to Repository Metadata ==
''adds a metadata filetype to existing repository metadata(this runs modifyrepo underneath).'' [[BR]]
[[BR]]
'''method''': POST [[BR]]
[[BR]]
'''path''': /repositories/<id>/add_metadata/ [[BR]]
[[BR]]
'''permission''': EXECUTE [[BR]]
[[BR]]
'''success response''': 200 Accepted [[BR]]
[[BR]]
'''failure response''': 404 Not Found if the id does not match a repository [[BR]]
[[BR]]
'''return''': True [[BR]]
[[BR]]
'''parameters''': 
 * '''filetype''' <str> ''filetype name to lookup in the metadata''
 * '''filedata''' <str> ''file data to be stored''
[[BR]]

== Add A Package ==
''Associates a new package to the repository. This does not update metadata; call generate_metadata after this call.'' [[BR]]
[[BR]]
'''method''': POST [[BR]]
[[BR]]
'''path''': /repositories/<id>/add_package/ [[BR]]
[[BR]]
'''permission''': EXECUTE [[BR]]
[[BR]]
'''success response''': 200 OK [[BR]]
[[BR]]
'''failure response''': 404 Not Found if the id does not match a repository [[BR]]
[[BR]]
'''return''': list of errors, count of filtered packages [[BR]]
[[BR]]
'''parameters''': 
 * '''packageid''' <list of str> ''id of package to add''
[[BR]]

== Add Package Group To Category ==
''Add a package group to one of the repository's package group categories.'' [[BR]]
[[BR]]
'''method''': POST [[BR]]
[[BR]]
'''path''': /repositories/<id>/add_packagegroup_to_category/ [[BR]]
[[BR]]
'''permission''': EXECUTE [[BR]]
[[BR]]
'''success response''': 200 OK [[BR]]
[[BR]]
'''failure response''': 
 400 Bad Request if the required parameters are not present [[BR]]
                           404 Not Found if the id does not match a repository [[BR]]
[[BR]]
'''return''': nil [[BR]]
[[BR]]
'''parameters''': 
 * '''categoryid''' <str> ''package group category id''
 * '''groupid''' <str> ''package group id''
[[BR]]

== Add Packages To Package Group ==
''Add packages to a package group that is in the repository.'' [[BR]]
[[BR]]
'''method''': POST [[BR]]
[[BR]]
'''path''': /repositories/<id>/add_packages_to_group/ [[BR]]
[[BR]]
'''permission''': EXECUTE [[BR]]
[[BR]]
'''success response''': 200 OK [[BR]]
[[BR]]
'''failure response''': 
 400 Bad Request if the required parameters are not present [[BR]]
                           404 Not Found if the id does not match a repository [[BR]]
[[BR]]
'''return''': nil [[BR]]
[[BR]]
'''parameters''': 
 * '''groupid''' <str> ''package group id''
 * '''packagenames''' <list of str> ''list of packages to add to the package group''
[[BR]]

== Add Keys ==
''Add gpg keys to the repsository'' [[BR]]
[[BR]]
'''method''': POST [[BR]]
[[BR]]
'''path''': /repositories/<id>/addkeys/ [[BR]]
[[BR]]
'''permission''': EXECUTE [[BR]]
[[BR]]
'''success response''': 200 OK [[BR]]
[[BR]]
'''failure response''': 404 Not Found if the id does not match a repository [[BR]]
[[BR]]
'''return''': true [[BR]]
[[BR]]
'''parameters''': 
 * '''keylist''' <list of str binary lists> ''list of (key name, content) tuples''
[[BR]]

== Repository Clone ==
''Create a new repository by cloning an existing one.'' [[BR]]
[[BR]]
'''method''': POST [[BR]]
[[BR]]
'''path''': /repositories/<id>/clone/ [[BR]]
[[BR]]
'''permission''': EXECUTE [[BR]]
[[BR]]
'''success response''': 202 Accepted [[BR]]
[[BR]]
'''failure response''': 
 404 Not Found if the id does not match a repository [[BR]]
                           409 Conflict if the parameters match an existing repository [[BR]]
                           409 Conflict if the parent repository is currently syncing [[BR]]
[[BR]]
'''return''': a Task object [[BR]]
[[BR]]
'''parameters''': 
 * '''clone_id''' <str> ''the id of the clone repository''
 * '''clone_name''' <str> ''the namd of clone repository''
 * '''feed''' <str> ''feed of the clone repository - parent/origin/none''
 * '''relative_path''' ''(optional)'' <str> ''clone repository on disk path''
 * '''groupid''' ''(optional)'' <str> ''repository groups that clone belongs to''
 * '''filters''' ''(optional)'' <list of objects> ''synchronization filters to apply to the clone''
 * '''publish''' ''(optional)'' <bool> ''sets the publish state on a repository; if not specified uses 'default_to_published' value from pulp.conf''
[[BR]]

== Create A Package Group ==
''Create a new package group in the repository.'' [[BR]]
[[BR]]
'''method''': POST [[BR]]
[[BR]]
'''path''': /repositories/<id>/create_packagegroup/ [[BR]]
[[BR]]
'''permission''': EXECUTE [[BR]]
[[BR]]
'''success response''': 200 OK [[BR]]
[[BR]]
'''failure response''': 
 400 Bad Request if the required parameters are not present [[BR]]
                           404 Not Found if the id does not match a repository [[BR]]
[[BR]]
'''return''': [[BR]]
'''parameters''': 
 * '''groupid''' <str> ''id of the package group''
 * '''groupname''' <str> ''name of the package group''
 * '''description''' <str> ''package group description''
[[BR]]

== Create Package Group Category ==
''Create a new package group category in the repository.'' [[BR]]
[[BR]]
'''method''': POST [[BR]]
[[BR]]
'''path''': /repositories/<id>/create_packagegroupcategory/ [[BR]]
[[BR]]
'''permission''': EXECUTE [[BR]]
[[BR]]
'''success response''': 200 OK [[BR]]
[[BR]]
'''failure response''': 
 400 Bad Request if the required parameters are not present [[BR]]
                           404 Not Found if the id does not match a repository [[BR]]
[[BR]]
'''return''': !PackageGroupCategory object [[BR]]
[[BR]]
'''parameters''': 
 * '''categoryid''' <str> ''package group category id''
 * '''categoryname''' <str> ''package group category name''
 * '''description''' <str> ''description of the package group category''
[[BR]]

== Delete Errata ==
''Delete errata from the repository. This does not update metadata; call generate_metadata after this call.'' [[BR]]
[[BR]]
'''method''': POST [[BR]]
[[BR]]
'''path''': /repositories/<id>/delete_errata/ [[BR]]
[[BR]]
'''permission''': EXECUTE [[BR]]
[[BR]]
'''success response''': 200 OK [[BR]]
[[BR]]
'''failure response''': 404 Not Found if the id does not match a repository [[BR]]
[[BR]]
'''return''': true [[BR]]
[[BR]]
'''parameters''': 
 * '''errataid''' <str> ''errata id''
[[BR]]

== Delete A Package ==
''Dis-associates a package from the repository. This does not update metadata; call generate_metadata after this call.'' [[BR]]
[[BR]]
'''method''': POST [[BR]]
[[BR]]
'''path''': /repositories/<id>/delete_package/ [[BR]]
[[BR]]
'''permission''': EXECUTE [[BR]]
[[BR]]
'''success response''': 200 OK [[BR]]
[[BR]]
'''failure response''': 404 Not Found if the id does not match a repository [[BR]]
[[BR]]
'''return''': true [[BR]]
[[BR]]
'''parameters''': 
 * '''package''' <Package object> ''package to delete''
[[BR]]

== Delete A Package From A Package Group ==
''Delete a package from a package group in the repository.'' [[BR]]
[[BR]]
'''method''': POST [[BR]]
[[BR]]
'''path''': /repositories/<id>/delete_package_from_group/ [[BR]]
[[BR]]
'''permission''': EXECUTE [[BR]]
[[BR]]
'''success response''': 200 OK [[BR]]
[[BR]]
'''failure response''': 
 400 Bad Request if the required parameters are not present [[BR]]
                           404 Not Found if the id does not match a repository [[BR]]
[[BR]]
'''return''': nil [[BR]]
[[BR]]
'''parameters''': 
 * '''groupid''' <str> ''package group id''
 * '''name''' <str> ''package name to remove''
[[BR]]

== Delete A Package Group ==
''Delete a package group from the repository.'' [[BR]]
[[BR]]
'''method''': POST [[BR]]
[[BR]]
'''path''': /repositories/<id>/delete_packagegroup/ [[BR]]
[[BR]]
'''permission''': EXECUTE [[BR]]
[[BR]]
'''success response''': 200 OK [[BR]]
[[BR]]
'''failure response''': 
 400 Bad Request if the required parameters are not present [[BR]]
                           404 Not Found if the id does not match a repository [[BR]]
[[BR]]
'''return''': nil [[BR]]
[[BR]]
'''parameters''': 
 * '''groupid''' <str> ''id of the package group''
[[BR]]

== Delete Package Group From Category ==
''Delete a package group from one of the repository's package group categories.'' [[BR]]
[[BR]]
'''method''': POST [[BR]]
[[BR]]
'''path''': /repositories/<id>/delete_pacakgegroup_from_category/ [[BR]]
[[BR]]
'''permission''': EXECUTE [[BR]]
[[BR]]
'''success response''': 200 OK [[BR]]
[[BR]]
'''failure response''': 
 400 Bad Request if the required parameters are not present [[BR]]
                           404 Not Found if the id does not match a repository [[BR]]
[[BR]]
'''return''': nil [[BR]]
[[BR]]
'''parameters''': 
 * '''categoryid''' <str> ''package group category id''
 * '''groupid''' <str> ''package group id''
[[BR]]

== Delete Package Group Category ==
''Delete a package group category from the repository.'' [[BR]]
[[BR]]
'''method''': POST [[BR]]
[[BR]]
'''path''': /repositories/<id>/delete_packagegroupcategory/ [[BR]]
[[BR]]
'''permission''': EXECUTE [[BR]]
[[BR]]
'''success response''': 200 OK [[BR]]
[[BR]]
'''failure response''': 
 400 Bad Request if the required parameters are not present [[BR]]
                           404 Not Found if the id does not match a repository [[BR]]
[[BR]]
'''return''': nil [[BR]]
[[BR]]
'''parameters''': 
 * '''categoryid''' <str> ''package group category id''
[[BR]]

== download custom metadata filetype from Repository Metadata ==
''download an xml file for the filetype specified'' [[BR]]
''                     if exists in a repository metadata; else None.'' [[BR]]
[[BR]]
'''method''': POST [[BR]]
[[BR]]
'''path''': /repositories/<id>/download_metadata/ [[BR]]
[[BR]]
'''permission''': EXECUTE [[BR]]
[[BR]]
'''success response''': 200 Accepted [[BR]]
[[BR]]
'''failure response''': 404 Not Found if the id does not match a repository [[BR]]
[[BR]]
'''return''': True [[BR]]
[[BR]]
'''parameters''': 
 * '''filetype''' <str> ''filetype name to lookup in the metadata''
[[BR]]

== Repository Content Export ==
''Export the repository's content into target directory from its source.'' [[BR]]
[[BR]]
'''method''': POST [[BR]]
[[BR]]
'''path''': /repositories/<id>/export/ [[BR]]
[[BR]]
'''permission''': EXECUTE [[BR]]
[[BR]]
'''success response''': 202 Accepted [[BR]]
[[BR]]
'''failure response''': 
 404 Not Found if the id does not match a repository [[BR]]
                           406 Not Acceptable if the repository does not have a source [[BR]]
                           409 Conflict if a export is already in progress for the repository [[BR]]
[[BR]]
'''return''': a Task object [[BR]]
[[BR]]
'''parameters''': 
 * '''target_location''' <str> ''target location on the server filesystem where the content needs to be exported''
 * '''generate_isos''' ''(optional)'' <boolean> ''wrap the exported content into iso image files.''
 * '''overwrite''' ''(optional)'' <boolean> ''overwrite the content in target location if not empty''
[[BR]]

== Repository Metadata generation ==
''spawn a repository's metadata generation. If metadata already exists, its a update otherwise a create'' [[BR]]
[[BR]]
'''method''': POST [[BR]]
[[BR]]
'''path''': /repositories/<id>/generate_metadata/ [[BR]]
[[BR]]
'''permission''': EXECUTE [[BR]]
[[BR]]
'''success response''': 202 Accepted [[BR]]
[[BR]]
'''failure response''': 
 404 Not Found if the id does not match a repository [[BR]]
                           406 Not Acceptable if the repository does not have a source [[BR]]
                           409 Conflict if a metadata is already in progress for the repository [[BR]]
[[BR]]
'''return''': a Task object [[BR]]
[[BR]]

== Get Package By File Name ==
''Get packages from the repository by specifying the file names.'' [[BR]]
[[BR]]
'''method''': POST [[BR]]
[[BR]]
'''path''': /repositories/<id>/get_package_by_filename/ [[BR]]
[[BR]]
'''permission''': EXECUTE [[BR]]
[[BR]]
'''success response''': 200 OK [[BR]]
[[BR]]
'''failure response''': 404 Not Found if the id does not match a repository [[BR]]
[[BR]]
'''return''': list of Package Objects [[BR]]
[[BR]]
'''parameters''': 
 * '''filename''' <list of str> ''list of file names''
[[BR]]

== Get Package By NVREA ==
''Get packages from the repository by specifying package name, version, release, epoc, and architecture'' [[BR]]
[[BR]]
'''method''': POST [[BR]]
[[BR]]
'''path''': /repositories/<id>/get_package_by_nvrea/ [[BR]]
[[BR]]
'''permission''': EXECUTE [[BR]]
[[BR]]
'''success response''': 200 OK [[BR]]
[[BR]]
'''failure response''': 404 Not Found if the id does not match a repository [[BR]]
[[BR]]
'''return''': object of package file names to Package objects [[BR]]
[[BR]]
'''example''': 
{{{
#!js
 {'nvrea': {'name': 'pulp',
            'version': '1.0.0',
            'release': '2',
            'epoch': '0',
            'arch': 'x86_64'}
 }
}}}
[[BR]]
'''parameters''': 
 * '''nvrea''' <object> ''object fields: name, version, release, epoch, arch''
[[BR]]

== Import Comps ==
''Create packagegroups and categories from a comps.xml file.'' [[BR]]
[[BR]]
'''method''': POST [[BR]]
[[BR]]
'''path''': /repositories/<id>/import_comps/ [[BR]]
[[BR]]
'''permission''': EXECUTE [[BR]]
[[BR]]
'''success response''': 201 Created [[BR]]
[[BR]]
'''failure response''': 404 Not Found if the id does not match a repository [[BR]]
[[BR]]
'''return''': True on success, False on failure [[BR]]
[[BR]]
'''parameters''': 
 * xml comps file body
[[BR]]

== list metadata filetype information from a Repository ==
''lists information about all the filetypes present in metadata'' [[BR]]
''                    and their info such as size, checksum, path etc.'' [[BR]]
[[BR]]
'''method''': POST [[BR]]
[[BR]]
'''path''': /repositories/<id>/list_metadata/ [[BR]]
[[BR]]
'''permission''': EXECUTE [[BR]]
[[BR]]
'''success response''': 200 Accepted [[BR]]
[[BR]]
'''failure response''': 404 Not Found if the id does not match a repository [[BR]]
[[BR]]
'''return''': dict or None [[BR]]
[[BR]]

== remove distributions to Repository ==
''Remove distributions to repositories'' [[BR]]
[[BR]]
'''method''': POST [[BR]]
[[BR]]
'''path''': /repositories/<id>/remove_distribution/ [[BR]]
[[BR]]
'''permission''': EXECUTE [[BR]]
[[BR]]
'''success response''': 200 OK [[BR]]
[[BR]]
'''failure response''': 404 Not Found if the id does not match a repository [[BR]]
[[BR]]
'''return''': True on successful remove, False otherwise [[BR]]
[[BR]]
'''parameters''': 
 * '''distributionid''' <str> ''distribution id''
[[BR]]

== Remove File ==
''Remove files from the repository.'' [[BR]]
[[BR]]
'''method''': POST [[BR]]
[[BR]]
'''path''': /repositories/<id>/remove_file/ [[BR]]
[[BR]]
'''permission''': EXECUTE [[BR]]
[[BR]]
'''success response''': 200 OK [[BR]]
[[BR]]
'''failure response''': 404 Not Found if the id does not match a repository [[BR]]
[[BR]]
'''return''': true [[BR]]
[[BR]]
'''parameters''': 
 * '''fileids''' <list of str> ''list of file ids''
[[BR]]

== Remove Filters ==
''Remove filters from the repository.'' [[BR]]
[[BR]]
'''method''': POST [[BR]]
[[BR]]
'''path''': /repositories/<id>/remove_filters/ [[BR]]
[[BR]]
'''permission''': EXECUTE [[BR]]
[[BR]]
'''success response''': 200 OK [[BR]]
[[BR]]
'''failure response''': 404 Not Found if the id does not match a repository [[BR]]
[[BR]]
'''return''': true [[BR]]
[[BR]]
'''parameters''': 
 * '''filters''' <list of str> ''list of filter ids''
[[BR]]

== Remove Group ==
''Remove a group from the repository.'' [[BR]]
[[BR]]
'''method''': POST [[BR]]
[[BR]]
'''path''': /repositories/<id>/remove_group/ [[BR]]
[[BR]]
'''permission''': EXECUTE [[BR]]
[[BR]]
'''success response''': 200 OK [[BR]]
[[BR]]
'''failure response''': 404 Not Found if the id does not match a repository [[BR]]
[[BR]]
'''return''': true [[BR]]
[[BR]]
'''parameters''': 
 * '''rmgrp''' <str> ''group id''
[[BR]]

== remove metadata filetype from Repository Metadata ==
''remove the specified metadata filetype'' [[BR]]
''                     if exists from a repository metadata; else None.'' [[BR]]
[[BR]]
'''method''': POST [[BR]]
[[BR]]
'''path''': /repositories/<id>/remove_metadata/ [[BR]]
[[BR]]
'''permission''': EXECUTE [[BR]]
[[BR]]
'''success response''': 200 Accepted [[BR]]
[[BR]]
'''failure response''': 404 Not Found if the id does not match a repository [[BR]]
[[BR]]
'''return''': True [[BR]]
[[BR]]
'''parameters''': 
 * '''filetype''' <str> ''filetype name to lookup in the metadata''
[[BR]]

== Remove Keys ==
''Remove gpg keys from the repository.'' [[BR]]
[[BR]]
'''method''': POST [[BR]]
[[BR]]
'''path''': /repositories/<id>/rmkeys/ [[BR]]
[[BR]]
'''permission''': EXECUTE [[BR]]
[[BR]]
'''success response''': 200 OK [[BR]]
[[BR]]
'''failure response''': 404 Not Found if the id does not match a repository [[BR]]
[[BR]]
'''return''': true [[BR]]
[[BR]]
'''parameters''': 
 * '''keys list''' <list of str> ''list of key names to remove''
[[BR]]

== Repository Sychronization ==
''Synchronize the repository's content from its source.'' [[BR]]
[[BR]]
'''method''': POST [[BR]]
[[BR]]
'''path''': /repositories/<id>/sync/ [[BR]]
[[BR]]
'''permission''': EXECUTE [[BR]]
[[BR]]
'''success response''': 202 Accepted [[BR]]
[[BR]]
'''failure response''': 
 404 Not Found if the id does not match a repository [[BR]]
                           406 Not Acceptable if the repository does not have a source [[BR]]
                           409 Conflict if a sync is already in progress for the repository [[BR]]
[[BR]]
'''return''': a Task object [[BR]]
[[BR]]
'''parameters''': 
 * '''timeout''' ''(optional)'' <str> ''timeout in <units>:<value> format (e.g. hours:2) valid units: seconds, minutes, hours, days, weeks''
 * '''skip''' ''(optional)'' <object> ''yum skip dict''
 * '''limit''' ''(optional)'' <int> ''value in KB/sec to limit download bandwidth per thread.  Only applicable for yum synchronization''
 * '''threads''' ''(optional)'' <int> ''number of threads to use for synchronization.  Only applicable for yum synchronization''
[[BR]]

== Update Publish ==
''Update a repository's 'publish' state.'' [[BR]]
''                     True means the repository is exposed through Apache.'' [[BR]]
''                     False means to stop exposing from Apache.'' [[BR]]
[[BR]]
'''method''': POST [[BR]]
[[BR]]
'''path''': /repositories/<id>/update_publish/ [[BR]]
[[BR]]
'''permission''': EXECUTE [[BR]]
[[BR]]
'''success response''': 200 OK [[BR]]
[[BR]]
'''failure response''': 404 Not Found if the id does not match a repository [[BR]]
[[BR]]
'''return''': True on successful update, False otherwise [[BR]]
[[BR]]
'''parameters''': 
 * '''state''' <bool> ''puplish state''
[[BR]]

== Repository Upload ==
''Upload a package to the repository.'' [[BR]]
[[BR]]
'''method''': POST [[BR]]
[[BR]]
'''path''': /repositories/<id>/upload/ [[BR]]
[[BR]]
'''permission''': EXECUTE [[BR]]
[[BR]]
'''success response''': 200 OK [[BR]]
[[BR]]
'''failure response''': 404 Not Found if the id does not match a repository [[BR]]
[[BR]]
'''return''': true [[BR]]
[[BR]]
'''parameters''': 
 * '''pkginfo''' <str> ''package information''
 * '''pkgstream''' <binary> ''package data''
[[BR]]

----

== Repository Comps XML ==
''Get the xml content of the repository comps file'' [[BR]]
[[BR]]
'''method''': GET [[BR]]
[[BR]]
'''path''': /repositories/<id>/comps/ [[BR]]
[[BR]]
'''permission''': READ [[BR]]
[[BR]]
'''success response''': 200 OK [[BR]]
[[BR]]
'''failure response''': Unspecified [[BR]]
[[BR]]
'''return''': xml comps file [[BR]]
[[BR]]

== Repository Distribution ==
''List the distributions the repository is part of.'' [[BR]]
[[BR]]
'''method''': GET [[BR]]
[[BR]]
'''path''': /repositories/<id>/distribution/ [[BR]]
[[BR]]
'''permission''': READ [[BR]]
[[BR]]
'''success response''': 200 OK [[BR]]
[[BR]]
'''failure response''': Unspecified [[BR]]
[[BR]]
'''return''': list of Distribution objects [[BR]]
[[BR]]

== Repository Errata ==
''List the applicable errata for the repository.'' [[BR]]
[[BR]]
'''method''': GET [[BR]]
[[BR]]
'''path''': /repositories/<id>/errata/ [[BR]]
[[BR]]
'''permission''': READ [[BR]]
[[BR]]
'''success response''': 200 OK [[BR]]
[[BR]]
'''failure response''': 404 Not Found if the id does not match a repository [[BR]]
[[BR]]
'''return''': list of Errata objects [[BR]]
[[BR]]
'''example''': 
{{{
#!js
[{'id': '',
  'title': '',
  'type': '',
  'severity': null},
 {'id': '',
  'title': '',
  'type': '',
  'severity': ''},
 ...]
}}}
[[BR]]
'''filters''': 
 * '''type''' <str> ''type of errata''
[[BR]]

== Repository Files ==
''List the non-package files in the repository.'' [[BR]]
[[BR]]
'''method''': GET [[BR]]
[[BR]]
'''path''': /repositories/<id>/files/ [[BR]]
[[BR]]
'''permission''': READ [[BR]]
[[BR]]
'''success response''': 200 OK [[BR]]
[[BR]]
'''failure response''': Unspecified [[BR]]
[[BR]]
'''return''': list of File objects [[BR]]
[[BR]]

== Repository GPG Keys ==
''List the gpg keys used by the repository.'' [[BR]]
[[BR]]
'''method''': GET [[BR]]
[[BR]]
'''path''': /repositories/<id>/keys/ [[BR]]
[[BR]]
'''permission''': READ [[BR]]
[[BR]]
'''success response''': 200 OK [[BR]]
[[BR]]
'''failure response''': Unspecified [[BR]]
[[BR]]
'''return''': list of gpg keys [[BR]]
[[BR]]

== Repository Package Group Categories ==
''Get the package group categories in the repository.'' [[BR]]
[[BR]]
'''method''': GET [[BR]]
[[BR]]
'''path''': /repositories/<id>/packagegroupcategories/ [[BR]]
[[BR]]
'''permission''': READ [[BR]]
[[BR]]
'''success response''': 200 OK [[BR]]
[[BR]]
'''failure response''': 404 Not Found if the id does not match a repository [[BR]]
[[BR]]
'''return''': list of package group category names [[BR]]
[[BR]]
'''example''': 
{{{
#!js
 {
  "cat_id_1": {
    "description": "cat_descrp_1",
    "repo_defined": false,
    "display_order": 99,
    "immutable": false,
    "translated_name": {},
    "packagegroupids": [],
    "translated_description": {},
    "_id": "cat_id_1",
    "id": "cat_id_1",
    "name": "cat_name_1"
  }
}
}}}
[[BR]]
'''filters''': 
 * '''id''' <str> ''package group category id''
 * '''packagegroupcategories''' <str> ''package group category name''
[[BR]]

== Repository Package Groups ==
''Get the package groups in the repositories.'' [[BR]]
[[BR]]
'''method''': GET [[BR]]
[[BR]]
'''path''': /repositories/<repository id>/packagegroups/ [[BR]]
[[BR]]
'''permission''': READ [[BR]]
[[BR]]
'''success response''': 200 OK [[BR]]
[[BR]]
'''failure response''': 404 Not Found if the id does not match a repository [[BR]]
[[BR]]
'''return''': Package Groups object [[BR]]
[[BR]]
'''example''': 
{{{
#!js
{"pkg_group_id_1": {
    "mandatory_package_names": [],
    "description": "pkg_grp_description_1",
    "repo_defined": false,
    "default": true,
    "name": "pkg_group_name_1",
    "display_order": 1024,
    "user_visible": true,
    "translated_name": {},
    "translated_description": {},
    "conditional_package_names": {},
    "default_package_names": [],
    "id": "pkg_group_id_1",
    "langonly": null,
    "_id": "pkg_group_id_1",
    "immutable": false,
    "optional_package_names": []
  }
}
}}}
[[BR]]
'''filters''': 
 * '''filter_missing_packages''' <bool> ''True means to filter results to remove missing package names''
 * '''filter_incomplete_groups''' <bool> ''True means to filter results to remove groups with missing packages''
[[BR]]

== Repository Packages ==
''Get the packages in a repository'' [[BR]]
[[BR]]
'''method''': GET [[BR]]
[[BR]]
'''path''': /repositories/<id>/packages/ [[BR]]
[[BR]]
'''permission''': READ [[BR]]
[[BR]]
'''success response''': 200 OK [[BR]]
[[BR]]
'''failure response''': 404 Not Found if the id does not match a repository [[BR]]
[[BR]]
'''return''': list of Package objects [[BR]]
[[BR]]
'''example''': 
{{{
#!js
[{'arch': 'x86_64',
  'buildhost': 'x86-05.phx2.fedoraproject.org',
  'checksum': {'sha256': '46d0ca0bc9f943d38bd0819b849072c5a48c4107fd6e17bb7a1f9782fa1dccfe'},
  'description': '0 A.D. (pronounced "zero ey-dee") is a free, open-source, cross-platform real-time
 (RTS) game of ancient warfare. In short, it is a historically-based
omy game that allows players to relive or rewrite the history of Western
tions, focusing on the years between 500 B.C. and 500 A.D. The project is
mbitious, involving state-of-the-art 3D graphics, detailed artwork, sound,
exible and powerful custom-built game engine.
 has been in development by Wildfire Games (WFG), a group of volunteer,
 game developers, since 2001.',
  'download_url': 'https://localhost//pulp/repos/repos/bioinfornatics/0ad/fedora-16/x86_64/0ad-0.10836-15.20111230svn10836.fc16.x86_64.rpm',
  'epoch': '0',
  'filename': '0ad-0.10836-15.20111230svn10836.fc16.x86_64.rpm',
  'group': 'Amusements/Games',
  'id': 'e8c7520d-00ee-44b9-863e-b50db7ac9252',
  'license': 'GPLv2+ and MIT',
  'name': '0ad',
  'provides': ['0ad(x86-64)',
                '0ad',
                'libnvtt.so()(64bit)',
                'libnvmath.so()(64bit)',
                'libnvimage.so()(64bit)',
                ...],
  'release': '15.20111230svn10836.fc16',
  'repo_defined': True,
  'requires': ['libstdc++.so.6(GLIBCXX_3.4)(64bit)',
                'librt.so.1()(64bit)',
                'libpthread.so.0()(64bit)',
                'libstdc++.so.6(CXXABI_1.3.1)(64bit)',
                'libcurl.so.4()(64bit)',
                ...],
  'size': 3592509,
  'vendor': 'Fedora Project',
  'version': '0.10836'},
{'_id': 'e078a03a-979f-4bfe-b47e-8e86a7e9e224',
 '_ns': 'packages',
 'arch': 'x86_64',
 'buildhost': 'x86-05.phx2.fedoraproject.org',
 'checksum': {'sha256': 'bde5b50d462142a9cd8aee02b8fbc6665eda3ddfb324c0d9c072817a2babb4f8'},
 'description': 'This package provides debug information for package 0ad.
formation is useful when developing applications that use this
or when debugging this package.',
 'download_url': 'https://localhost//pulp/repos/repos/bioinfornatics/0ad/fedora-16/x86_64/0ad-debuginfo-0.10836-15.20111230svn10836.fc16.x86_64.rpm',
 'epoch': '0',
 'filename': '0ad-debuginfo-0.10836-15.20111230svn10836.fc16.x86_64.rpm',
 'group': 'Development/Debug',
 'id': 'e078a03a-979f-4bfe-b47e-8e86a7e9e224',
 'license': 'GPLv2+ and MIT',
 'name': '0ad-debuginfo',
 'provides': ['0ad-debuginfo(x86-64)', '0ad-debuginfo'],
 'release': '15.20111230svn10836.fc16',
 'repo_defined': True,
 'requires': [],
 'size': 41946553,
 'vendor': 'Fedora Project',
 'version': '0.10836'}]
}}}
[[BR]]
'''filters''': 
 * '''name''' <str> ''package name''
 * '''version''' <str> ''package version''
 * '''release''' <str> ''package release''
 * '''epoch''' <int> ''package epoch''
 * '''arch''' <str> ''package architecture''
 * '''filename''' <str> ''name of package file''
 * '''field''' <str> ''field to include in Package objects''
[[BR]]

----

== Delete a Note from a Repository ==
''Delete a Note from a Repository'' [[BR]]
[[BR]]
'''method''': DELETE [[BR]]
[[BR]]
'''path''': /repositories/<id>/notes/<key>/ [[BR]]
[[BR]]
'''permission''': DELETE [[BR]]
[[BR]]
'''success response''': 200 OK [[BR]]
[[BR]]
'''failure response''': 
 404 Not Found if given repository does not exist [[BR]]
                           404 Not Found if given key does not exist [[BR]]
[[BR]]
'''return''': true [[BR]]
[[BR]]

== Update a key-value note of a Repository ==
''Change the value of an existing key in Repository Notes.'' [[BR]]
[[BR]]
'''method''': PUT [[BR]]
[[BR]]
'''path''': /repositories/<id>/notes/<key>/ [[BR]]
[[BR]]
'''permission''': UPDATE [[BR]]
[[BR]]
'''success response''': 200 OK [[BR]]
[[BR]]
'''failure response''': 
 404 Not Found if given repository does not exist [[BR]]
                           404 Not Found if given key does not exist [[BR]]
[[BR]]
'''return''': true [[BR]]
[[BR]]
'''parameters''': new value of the key [[BR]]
[[BR]]

----

== Add a Note to the Repository ==
''Add a Note to the Repository'' [[BR]]
[[BR]]
'''method''': POST [[BR]]
[[BR]]
'''path''': /repositories/<id>/notes/ [[BR]]
[[BR]]
'''permission''': EXECUTE [[BR]]
[[BR]]
'''success response''': 200 OK [[BR]]
[[BR]]
'''failure response''': 
 404 Not found if given repository does not exist [[BR]]
                           409 Conflict if given key already exists [[BR]]
[[BR]]
'''return''': true [[BR]]
[[BR]]
'''parameters''': 
 * '''key''' <str> ''key to be added''
 * '''value''' <str> ''value of key''
[[BR]]

----

== Repository Action History ==
''List completed actions and their results for a repository.'' [[BR]]
[[BR]]
'''method''': GET [[BR]]
[[BR]]
'''path''': /repositories/<id>/history/<action name>/ [[BR]]
[[BR]]
'''permission''': READ [[BR]]
[[BR]]
'''success response''': 200 OK [[BR]]
[[BR]]
'''failure response''': 404 Not Found if the repository does not exist or no action informaion is available [[BR]]
[[BR]]
'''return''': list of task history objects [[BR]]
[[BR]]

----

== Repository Synchronization Schedules ==
''List all repository synchronization schedules.'' [[BR]]
[[BR]]
'''method''': GET [[BR]]
[[BR]]
'''path''': /repositories/schedules/ [[BR]]
[[BR]]
'''permission''': READ [[BR]]
[[BR]]
'''success response''': 200 OK [[BR]]
[[BR]]
'''failure response''': None [[BR]]
[[BR]]
'''return''': list of object that are mappings of repository id to synchronization schedule [[BR]]
[[BR]]

----

== Schedule Delete ==
''Remove a repository's schedule for the given type'' [[BR]]
[[BR]]
'''method''': DELETE [[BR]]
[[BR]]
'''path''': /repositories/<id>/schedules/<type>/ [[BR]]
[[BR]]
'''permission''': DELETE [[BR]]
[[BR]]
'''success response''': 200 OK [[BR]]
[[BR]]
'''failure response''': 404 Not Found [[BR]]
[[BR]]
'''return''': (empty) Schedule object [[BR]]
[[BR]]
'''example''': 
{{{
#!js
{'href': '/pulp/api/repositories/0ad/',
 'id': '0ad',
 'options': null,
 'schedule': null}
}}}
[[BR]]

== Schedule ==
''Get the repository schedule for the given type'' [[BR]]
[[BR]]
'''method''': GET [[BR]]
[[BR]]
'''path''': /repositories/<id>/schedules/<type>/ [[BR]]
[[BR]]
'''permission''': READ [[BR]]
[[BR]]
'''success response''': 200 OK [[BR]]
[[BR]]
'''failure response''': 404 Not Found [[BR]]
[[BR]]
'''return''': Schedule object [[BR]]
[[BR]]
'''example''': 
{{{
#!js
{'href': '/pulp/api/repositories/0ad/',
 'id': '0ad',
 'options': {'skip': {}},
 'schedule': '2011-12-13T13:45:00-07:00/PT5M',
 'type': 'sync'}
}}}
[[BR]]

== Schedule Create or Replace ==
''Create or replace a schedule for a repository of the given type'' [[BR]]
[[BR]]
'''method''': PUT [[BR]]
[[BR]]
'''path''': /repositories/<id>/schedules/<type>/ [[BR]]
[[BR]]
'''permission''': CREATE [[BR]]
[[BR]]
'''success response''': 200 OK [[BR]]
[[BR]]
'''failure response''': Unspecified [[BR]]
[[BR]]
'''return''': Schedule object [[BR]]
[[BR]]
'''example''': 
{{{
#!js
{'href': '/pulp/api/repositories/0ad/',
 'id': '0ad',
 'options': {'skip': {}},
 'schedule': '2011-12-13T13:45:00-07:00/PT5M',
 'type': 'sync'}
}}}
[[BR]]
'''parameters''': 
 * '''schedule''' <str> ''schedule for given type in iso8601 format''
 * '''options''' <obj> ''options for the scheduled action''
[[BR]]

== Schedule Create or Replace ==
''Create or replace a schedule for a repository of the given type'' [[BR]]
[[BR]]
'''method''': PUT [[BR]]
[[BR]]
'''path''': /repositories/<id>/schedules/<type>/ [[BR]]
[[BR]]
'''permission''': CREATE [[BR]]
[[BR]]
'''success response''': 200 OK [[BR]]
[[BR]]
'''failure response''': Unspecified [[BR]]
[[BR]]
'''return''': Schedule object [[BR]]
[[BR]]
'''example''': 
{{{
#!js
{'href': '/pulp/api/repositories/0ad/',
 'id': '0ad',
 'options': {'skip': {}},
 'schedule': '2011-12-13T13:45:00-07:00/PT5M',
 'type': 'sync'}
}}}
[[BR]]
'''parameters''': 
 * '''schedule''' <str> ''schedule for given type in iso8601 format''
 * '''options''' <obj> ''options for the scheduled action''
[[BR]]
