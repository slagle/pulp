# Bash completion script for pulp-admin

_pulp_admin_baseopts()
{
    local opts='--help -u --username -p --password --host'
    printf %s "$opts"
}

_repo_id()
{
    repos=`pulp-admin repo list | grep Id | awk '{print $2}' 2>/dev/null`
    COMPREPLY=( $( compgen -W '${repos}' -- "$1" ) )
    return 0
}

_consumer_id()
{
    consumers=`pulp-admin consumer list | grep Id | awk '{print $2}' 2>/dev/null`
    COMPREPLY=( $( compgen -W '${consumers}' -- "$1" ) )
    return 0
}

_pulp_admin()
{
    # Main copletion function

    COMPREPLY=()
    local cur prev
    local -a words

    # Set the $cur, $prev, and $words variable.  The helper function might not
    # be available.
    if type _get_comp_words_by_ref &>/dev/null ; then
        _get_comp_words_by_ref cur prev words
    else
        cur=$2 prev=$3 words=("${COMP_WORDS[@]}")
    fi

    # Commands offered as completions
    local cmds=( auth cds consumer consumergroup content distribution
        errata filter package packagegroup permission repo repogroup
        role user )

    local i c cmd subcmd
    # Figure out which command is being completed and set $cmd.
    for (( i=1; i < ${#words[@]}-1; i++ )) ; do
        [[ -n $cmd ]] && subcmd=${words[i]} && break
        # Recognize additional commands and aliases
        for c in ${cmds[@]}; do
            [[ ${words[i]} == $c ]] && cmd=$c && break
        done
    done

    # We need to check to see if we've seen any parameter that starts with -.
    # We use this flag later to determine to complete command/subcommand names
    # or parameters.
    seen_param=0
    for arg in ${COMP_WORDS[@]}; do
        if [[ $arg == -* ]]; then
            seen_param=1
        fi
    done

    # Repo id completion for --repoid and -r.
    if [ "$prev" == --repoid ] || [ "$prev" == -r ] ; then
        # Do not auto complete on -r for the repo command, -r means recursive
        # for the repo command.
        if [ "$cmd" != repo ]; then
            _repo_id $cur 
            return 0
        fi
    fi

    # Repo id completion for --id
    if [ "$prev" == --id ] && [ "$cmd" == repo ]; then
        _repo_id $cur
        return 0
    fi

    # Consumer id completion for --consumerid
    if [ "$prev" == --consumerid ]; then
        _consumer_id $cur 
        return 0
    fi

    # Consumer id completion for --id
    if [ "$prev" == --id ] && [ "$cmd" == consumer ]; then
        _consumer_id $cur
        return 0
    fi

    # If we've seen a parameter that starts with - ($seen_param) or there are
    # already 4 completed words, then we're doing parameter completion.
    if [ $seen_param -eq 1 ] || [ ${#COMP_WORDS[@]} -eq 4 ]; then
        case ${COMP_WORDS[1]} in

            auth)
                case ${COMP_WORDS[2]} in
                    login)
                        COMPREPLY=( $( compgen -W '-u --username -p --pasword' \
                            -- "$cur" ) )
                    ;;
                    enable_global_repo_auth)
                        COMPREPLY=( $( compgen -W '--ca --cert --key' \
                            -- "$cur" ) )
                    ;;
                esac
            ;;

            cds)
                case ${COMP_WORDS[2]} in
                    register)
                        COMPREPLY=( $( compgen -W '
                            --hostname --name --description --cluster_id
                            --interval --start --runs' \
                            -- "$cur" ) )
                    ;;
                    unregister)
                        COMPREPLY=( $( compgen -W '
                            --hostname --force' \
                            -- "$cur" ) )
                    ;;
                    update)
                        COMPREPLY=( $( compgen -W '
                            --hostname --name --description --cluster_id
                            --remove_cluster --remove_sync_schedule --interval
                            --start --runs' \
                            -- "$cur" ) )
                    ;;
                    associate_repo|unassociate_repo)
                        COMPREPLY=( $( compgen -W '
                            --hostname --repoid' \
                            -- "$cur" ) )
                    ;;
                    history)
                        COMPREPLY=( $( compgen -W '
                            --hostname --limit --event_type --sort --start_date
                            --end_date' \
                            -- "$cur" ) )
                    ;;
                    sync|info)
                        COMPREPLY=( $( compgen -W '
                            --hostname' \
                            -- "$cur" ) )
                    ;;
                    status)
                        COMPREPLY=( $( compgen -W '
                            --hostname --recent' \
                            -- "$cur" ) )
                    ;;
                esac
            ;;

            consumer)
                case ${COMP_WORDS[2]} in
                    list)
                        COMPREPLY=( $( compgen -W '
                            --key --value' \
                            -- "$cur" ) )
                    ;;
                    unregister|get_keyvalues)
                        COMPREPLY=( $( compgen -W '
                            --id' \
                            -- "$cur" ) )
                    ;;
                    info)
                        COMPREPLY=( $( compgen -W '
                            --id --show-profile' \
                            -- "$cur" ) )
                    ;;
                    bind|unbind)
                        COMPREPLY=( $( compgen -W '
                            --id --repoid' \
                            -- "$cur" ) )
                    ;;
                    unbind)
                        COMPREPLY=( $( compgen -W '
                            --hostname --limit --event_type --sort --start_date
                            --end_date' \
                            -- "$cur" ) )
                    ;;
                    add_keyvalue|update_keyvalue)
                        COMPREPLY=( $( compgen -W '
                            --id --key --value' \
                            -- "$cur" ) )
                    ;;
                    delete_keyvalue)
                        COMPREPLY=( $( compgen -W '
                            --id --key' \
                            -- "$cur" ) )
                    ;;
                    history)
                        COMPREPLY=( $( compgen -W '
                            --event_type --limit --sort --start_date
                            --end_date --id' \
                            -- "$cur" ) )
                    ;;
                esac
            ;;

            consumergroup)
                case ${COMP_WORDS[2]} in
                    create)
                        COMPREPLY=( $( compgen -W '
                            --id --description' \
                            -- "$cur" ) )
                    ;;
                    delete)
                        COMPREPLY=( $( compgen -W '
                            --id' \
                            -- "$cur" ) )
                    ;;
                    add_consumer|delete_consumer)
                        COMPREPLY=( $( compgen -W '
                            --id --consumerid' \
                            -- "$cur" ) )
                    ;;
                    bind|unbind)
                        COMPREPLY=( $( compgen -W '
                            --id --repoid' \
                            -- "$cur" ) )
                    ;;
                    add_keyvalue)
                        COMPREPLY=( $( compgen -W '
                            --id --key --value --force' \
                            -- "$cur" ) )
                    ;;
                    update_keyvalue)
                        COMPREPLY=( $( compgen -W '
                            --id --key --value' \
                            -- "$cur" ) )
                    ;;
                    delete_keyvalue)
                        COMPREPLY=( $( compgen -W '
                            --id --key' \
                            -- "$cur" ) )
                    ;;
                esac
            ;;

            content)
                case ${COMP_WORDS[2]} in
                    upload)
                        COMPREPLY=( $( compgen -W '
                            --dir -r --repoid --nosig --chunksize -v
                            --verbose' \
                            -- "$cur" ) )
                    ;;
                    list)
                        COMPREPLY=( $( compgen -W '
                            --orphaned --repoid' \
                            -- "$cur" ) )
                    ;;
                    delete)
                        COMPREPLY=( $( compgen -W '
                            -f --filename --csv' \
                            -- "$cur" ) )
                    ;;
                esac
            ;;

            distribution)
                case ${COMP_WORDS[2]} in
                    list)
                        COMPREPLY=( $( compgen -W '
                            --repoid' \
                            -- "$cur" ) )
                    ;;
                    info)
                        COMPREPLY=( $( compgen -W '
                            --id' \
                            -- "$cur" ) )
                    ;;
                esac
            ;;

            errata)
                case ${COMP_WORDS[2]} in
                    list)
                        COMPREPLY=( $( compgen -W '
                            --consumerid --repoid --type' \
                            -- "$cur" ) )
                    ;;
                    delete)
                        COMPREPLY=( $( compgen -W '
                            --id --title --type --bzid --cve --orphaned' \
                            -- "$cur" ) )
                    ;;
                    info)
                        COMPREPLY=( $( compgen -W '
                            --id' \
                            -- "$cur" ) )
                    ;;
                    install)
                        COMPREPLY=( $( compgen -W '
                            --erratum -e -y --assumeyes --when --nowait
                            --consumerid --consumergroupid' \
                            -- "$cur" ) )
                    ;;
                    create)
                        COMPREPLY=( $( compgen -W '
                            --id --title --description --version --release
                            --type --issued --status --updated --fromstr
                            --effected-packages --pushcount --references
                            --reboot --short --severity --rights --summary
                            --solution' \
                            -- "$cur" ) )
                    ;;
                    search)
                        COMPREPLY=( $( compgen -W '
                            --id --title --type --bzid --cve --orphaned' \
                            -- "$cur" ) )
                    ;;
                esac
            ;;

            filter)
                case ${COMP_WORDS[2]} in
                    create)
                        COMPREPLY=( $( compgen -W '
                            --id --type --description -p --package' \
                            -- "$cur" ) )
                    ;;
                    delete)
                        COMPREPLY=( $( compgen -W '
                            --id --force' \
                            -- "$cur" ) )
                    ;;
                    info)
                        COMPREPLY=( $( compgen -W '
                            --id' \
                            -- "$cur" ) )
                    ;;
                    add_package|remove_package)
                        COMPREPLY=( $( compgen -W '
                            --id -p --package' \
                            -- "$cur" ) )
                    ;;
                esac
            ;;

            package)
                case ${COMP_WORDS[2]} in
                    info)
                        COMPREPLY=( $( compgen -W '
                            -n --name --repoid' \
                            -- "$cur" ) )
                    ;;
                    install)
                        COMPREPLY=( $( compgen -W '
                            -n --name --when --nowait --consumerid
                            --consumergroupid' \
                            -- "$cur" ) )
                    ;;
                    search)
                        COMPREPLY=( $( compgen -W '
                            -a --arch -e --epoch -f --filename -n --name -r
                            --release -v --version -p --repoid' \
                            -- "$cur" ) )
                    ;;
                    deplist)
                        COMPREPLY=( $( compgen -W '
                            -n --name -r --repoid' \
                            -- "$cur" ) )
                    ;;
                esac
            ;;

            packagegroup)
                case ${COMP_WORDS[2]} in
                    list|info)
                        COMPREPLY=( $( compgen -W '
                            -r --repoid -f --filter' \
                            -- "$cur" ) )
                    ;;
                    create)
                        COMPREPLY=( $( compgen -W '
                            -r --repoid -n --name -d --description' \
                            -- "$cur" ) )
                    ;;
                    delete)
                        COMPREPLY=( $( compgen -W '
                            --id -r --repoid' \
                            -- "$cur" ) )
                    ;;
                    add_package)
                        COMPREPLY=( $( compgen -W '
                            --id -r --repoid -n --name -t --type --requires' \
                            -- "$cur" ) )
                    ;;
                    delete_package)
                        COMPREPLY=( $( compgen -W '
                            --id -r --repoid -n --name -t --type' \
                            -- "$cur" ) )
                    ;;
                    install)
                        COMPREPLY=( $( compgen -W '
                            --id --nowait --when --consumerid
                            --consumergroupid' \
                            -- "$cur" ) )
                    ;;
                    install_category)
                        COMPREPLY=( $( compgen -W '
                            --categoryid --consumerid --repoid' \
                            -- "$cur" ) )
                    ;;
                    list_category)
                        COMPREPLY=( $( compgen -W '
                            -r --repoid' \
                            -- "$cur" ) )
                    ;;
                    info_category|delete_category)
                        COMPREPLY=( $( compgen -W '
                            --categoryid -r --repoid' \
                            -- "$cur" ) )
                    ;;
                    create_category)
                        COMPREPLY=( $( compgen -W '
                            --categoryid -r --repoid -n --name -d
                            --description' \
                            -- "$cur" ) )
                    ;;
                    add_group|delete_group)
                        COMPREPLY=( $( compgen -W '
                            --id --categoryid -r --repoid' \
                            -- "$cur" ) )
                    ;;
                    import)
                        COMPREPLY=( $( compgen -W '
                            -r --repoid --comps' \
                            -- "$cur" ) )
                    ;;
                    export)
                        COMPREPLY=( $( compgen -W '
                            -r --repoid -o --out' \
                            -- "$cur" ) )
                    ;;
                esac
            ;;

            distribution)
                case ${COMP_WORDS[2]} in
                    show)
                        COMPREPLY=( $( compgen -W '
                            --resource' \
                            -- "$cur" ) )
                    ;;
                    grant|revoke)
                        COMPREPLY=( $( compgen -W '
                            --resource --user --role -o --operations' \
                            -- "$cur" ) )
                    ;;
                esac
            ;;

            repo)
                case ${COMP_WORDS[2]} in
                    list)
                        COMPREPLY=( $( compgen -W '
                            --groupid --note' \
                            -- "$cur" ) )
                    ;;
                    content)
                        COMPREPLY=( $( compgen -W '
                            --id --consumerid' \
                            -- "$cur" ) )
                    ;;
                    status|delete|cancel_sync|list_keys|list_metadata|cancel_export|info)
                        COMPREPLY=( $( compgen -W '
                            --id' \
                            -- "$cur" ) )
                    ;;
                    create)
                        COMPREPLY=( $( compgen -W '
                            --id --name --arch --feed --feed_ca --feed_cert
                            --feed_key
                            --consumer_ca --consumer_cert --consumer_key
                            --relativepath --groupid --gpgkeys
                            --checksum_type --preserve_metadata
                            --content_type' \
                            -- "$cur" ) )
                    ;;
                    clone)
                        COMPREPLY=( $( compgen -W '
                            --id --clone_id --clone_name --feed --relativepath
                            --groupid --timeout -F --foreground -f --filter' \
                            -- "$cur" ) )
                    ;;
                    update)
                        COMPREPLY=( $( compgen -W '
                            --id --name --arch --feed --feed_ca --feed_cert
                            --feed_key --remove_feed_cert --consumer_ca
                            --consumer_cert --consumer_key
                            --remove_consumer_cert --addgroup --rmgroup
                            --addkeys --rmkeys' \
                            -- "$cur" ) )
                    ;;
                    sync)
                        COMPREPLY=( $( compgen -W '
                            --id --show-schedule --delete-schedule --interval
                            --runs --start --exclude --timeout --limit --threads
                            -F --foreground' \
                            -- "$cur" ) )
                    ;;
                    publish)
                        COMPREPLY=( $( compgen -W '
                            --id --enable --disable' \
                            -- "$cur" ) )
                    ;;
                    add_package)
                        COMPREPLY=( $( compgen -W '
                            --id -p --package --source --csv -y --assumeyes -r
                            --recursive' \
                            -- "$cur" ) )
                    ;;
                    remove_package)
                        COMPREPLY=( $( compgen -W '
                            --id -p --package --csv -y --assumeyes -r
                            --recursive' \
                            -- "$cur" ) )
                    ;;
                    add_errata)
                        COMPREPLY=( $( compgen -W '
                            --id -e --errata --source -y --assumeyes -r
                            --recursive' \
                            -- "$cur" ) )
                    ;;
                    remove_errata)
                        COMPREPLY=( $( compgen -W '
                            --id -e --errata -y --asumeyes -r --recursive' \
                            -- "$cur" ) )
                    ;;
                    add_distribution)
                        COMPREPLY=( $( compgen -W '
                            --id -d --distribution --source' \
                            -- "$cur" ) )
                    ;;
                    remove_distribution)
                        COMPREPLY=( $( compgen -W '
                            --id -d --distribution' \
                            -- "$cur" ) )
                    ;;
                    add_file)
                        COMPREPLY=( $( compgen -W '
                            --id -f --filename --source --csv' \
                            -- "$cur" ) )
                    ;;
                    remove_file)
                        COMPREPLY=( $( compgen -W '
                            --id -f --filename --csv' \
                            -- "$cur" ) )
                    ;;
                    add_filters|remove_filters)
                        COMPREPLY=( $( compgen -W '
                            --id -f --filter' \
                            -- "$cur" ) )
                    ;;
                    generate_metadata)
                        COMPREPLY=( $( compgen -W '
                            --id --status' \
                            -- "$cur" ) )
                    ;;
                    add_metadata)
                        COMPREPLY=( $( compgen -W '
                            --id --mdtype --path' \
                            -- "$cur" ) )
                    ;;
                    download_metadata)
                        COMPREPLY=( $( compgen -W '
                            --id --mdtype -o --out' \
                            -- "$cur" ) )
                    ;;
                    remove_metadata)
                        COMPREPLY=( $( compgen -W '
                            --id --mdtype' \
                            -- "$cur" ) )
                    ;;
                    discovery)
                        COMPREPLY=( $( compgen -W '
                            -u --url --ca --cert -g --groupid -y --assumeyes
                            -t --type' \
                            -- "$cur" ) )
                    ;;
                    export)
                        COMPREPLY=( $( compgen -W '
                            --id -t --target_dir --generate-isos --overwrite' \
                            -- "$cur" ) )
                    ;;
                    add_note|update_note)
                        COMPREPLY=( $( compgen -W '
                            --id --key --value' \
                            -- "$cur" ) )
                    ;;
                    delete_note)
                        COMPREPLY=( $( compgen -W '
                            --id --key' \
                            -- "$cur" ) )
                    ;;
                esac
            ;;

            repogroup)
                case ${COMP_WORDS[2]} in
                    update)
                        COMPREPLY=( $( compgen -W '
                            --id --arch --feed_ca --feed_cert
                            --feed_key --remove_feed_cert --consumer_ca
                            --consumer_cert --consumer_key
                            --remove_consumer_cert
                            --addkeys --rmkeys --interval --start --runs
                            --delete-schedule' \
                            -- "$cur" ) )
                    ;;
                esac
            ;;
               
            role)
                case ${COMP_WORDS[2]} in
                    info|create|delete)
                        COMPREPLY=( $( compgen -W '
                            --role' \
                            -- "$cur" ) )
                    ;;
                    add|remove)
                        COMPREPLY=( $( compgen -W '
                            --role --user' \
                            -- "$cur" ) )
                    ;;
                esac
            ;;

            user)
                case ${COMP_WORDS[2]} in
                    create)
                        COMPREPLY=( $( compgen -W '
                            --username --password --ldap --name' \
                            -- "$cur" ) )
                    ;;
                    delete)
                        COMPREPLY=( $( compgen -W '
                            --username' \
                            -- "$cur" ) )
                    ;;
                    update)
                        COMPREPLY=( $( compgen -W '
                            --username --password -P --name' \
                            -- "$cur" ) )
                    ;;
                esac
            ;;

        esac
        return 0
    fi

    # Do command completion.  We only get here if we're not doing parameter
    # completion.
    case $cmd in

        auth)
            case $prev in 
                auth)
                    COMPREPLY=( $( compgen -W 'login logout 
                        enable_global_repo_auth disable_global_repo_auth' \
                        -- "$cur" ) )
                ;;
            esac
            return 0
            ;;

        cds)
            case $prev in 
                cds)
                    COMPREPLY=( $( compgen -W '
                        register unregister update associate_repo
                        unassociate_repo list history sync status info' \
                        -- "$cur" ) )
                ;;
            esac
            return 0
            ;;

         consumer)
            case $prev in 
                consumer)
                    COMPREPLY=( $( compgen -W '
                        list info unregister bind unbind add_keyvalue
                        delete_keyvalue get_keyvalues update_keyvalue history' \
                        -- "$cur" ) )
                ;;
            esac
            return 0
            ;;

         consumergroup)
            case $prev in 
                consumergroup)
                    COMPREPLY=( $( compgen -W '
                        list create delete add_consumer delete_consumer bind
                        unbind add_keyvalue delete_keyvalue update_keyvalue' \
                        -- "$cur" ) )
                ;;
            esac
            return 0
            ;;

         content)
            case $prev in 
                content)
                    COMPREPLY=( $( compgen -W '
                        upload list delete' \
                        -- "$cur" ) )
                ;;
            esac
            return 0
            ;;

         distribution)
            case $prev in 
                distribution)
                    COMPREPLY=( $( compgen -W '
                        list info' \
                        -- "$cur" ) )
                ;;
            esac
            return 0
            ;;

         errata)
            case $prev in 
                errata)
                    COMPREPLY=( $( compgen -W '
                        list search info install create delete' \
                        -- "$cur" ) )
                ;;
            esac
            return 0
            ;;

         filter)
            case $prev in 
                filter)
                    COMPREPLY=( $( compgen -W '
                        list create delete info add_package remove_package' \
                        -- "$cur" ) )
                ;;
            esac
            return 0
            ;;

         package)
            case $prev in 
                package)
                    COMPREPLY=( $( compgen -W '
                        info install search deplist' \
                        -- "$cur" ) )
                ;;
            esac
            return 0
            ;;

         packagegroup)
            case $prev in 
                packagegroup)
                    COMPREPLY=( $( compgen -W '
                        list info create delete add_package delete_package
                        install install_category list_category info_category
                        create_category delete_category add_group delete_group
                        import export' \
                        -- "$cur" ) )
                ;;
            esac
            return 0
            ;;

         permission)
            case $prev in 
                permission)
                    COMPREPLY=( $( compgen -W '
                        show grant revoke' \
                        -- "$cur" ) )
                ;;
            esac
            return 0
            ;;

         repo)
            case $prev in 
                repo)
                    COMPREPLY=( $( compgen -W '
                        list status content create clone delete update sync
                        cancel_sync list_keys publish add_package
                        remove_package add_errata remove_errata
                        add_distribution remove_distribution add_file
                        remove_file add_filters remove_filters
                        generate_metadata add_metadata list_metadata
                        download_metadata remove_metadata discovery export
                        cancel_export add_note delete_note update_note' \
                        -- "$cur" ) )
                ;;
            esac
            return 0
            ;;

         repogroup)
            case $prev in 
                repogroup)
                    COMPREPLY=( $( compgen -W '
                        update' \
                        -- "$cur" ) )
                ;;
            esac
            return 0
            ;;

         role)
            case $prev in 
                role)
                    COMPREPLY=( $( compgen -W '
                        list info create delete add remove' \
                        -- "$cur" ) )
                ;;
            esac
            return 0
            ;;

         user)
            case $prev in 
                user)
                    COMPREPLY=( $( compgen -W '
                        list create delete update' \
                        -- "$cur" ) )
                ;;
            esac
            return 0
            ;;

    esac

    COMPREPLY=( $( compgen -W '$( _pulp_admin_baseopts ) ${cmds[@]}' -- "$cur" ) )

} &&

complete -F _pulp_admin pulp-admin

# Local variables:
# mode: shell-script
# sh-basic-offset: 4
# sh-indent-comment: t
# indent-tabs-mode: nil
# End:
# ex: ts=4 sw=4 et filetype=sh
